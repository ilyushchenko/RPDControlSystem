// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using RPDControlSystem.Models.RPD;
using RPDControlSystem.Storage;
using System;

namespace RPDControlSystem.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180531095222_addPlanYear")]
    partial class addPlanYear
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RPDControlSystem.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseName")
                        .IsRequired();

                    b.Property<string>("Directory")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("DirectionCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DirectionCode");

                    b.ToTable("Competence");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Direction", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Qualification");

                    b.HasKey("Code");

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Discipline", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Code");

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.DisciplineCompetence", b =>
                {
                    b.Property<int>("DisciplineInfoId");

                    b.Property<int>("CompetenceId");

                    b.HasKey("DisciplineInfoId", "CompetenceId");

                    b.HasIndex("CompetenceId");

                    b.ToTable("DisciplineCompetence");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.DisciplineInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisciplineCode")
                        .IsRequired();

                    b.Property<int>("DisciplineType");

                    b.Property<string>("PlanCode")
                        .IsRequired();

                    b.Property<string>("TeacherProfileId");

                    b.Property<int?>("WorkPlanId");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineCode");

                    b.HasIndex("PlanCode");

                    b.HasIndex("TeacherProfileId");

                    b.HasIndex("WorkPlanId");

                    b.ToTable("DisciplineInfo");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Plan", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EducationForm");

                    b.Property<DateTime>("EducationYear");

                    b.Property<string>("ProfileCode")
                        .IsRequired();

                    b.HasKey("Code");

                    b.HasIndex("ProfileCode");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Profile", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DirectionCode")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Code");

                    b.HasIndex("DirectionCode");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.ProfileCompetence", b =>
                {
                    b.Property<string>("ProfileCode");

                    b.Property<int>("CompetenceId");

                    b.HasKey("ProfileCode", "CompetenceId");

                    b.HasIndex("CompetenceId");

                    b.ToTable("ProfileCompetence");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.TeacherProfile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("DegreeId")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("PhotoId");

                    b.Property<int?>("PostId")
                        .IsRequired();

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PostId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.TeacherProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.TeacherProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RPDControlSystem.Models.RPD.TeacherProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.TeacherProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Competence", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.Direction", "Direction")
                        .WithMany("Competencies")
                        .HasForeignKey("DirectionCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.DisciplineCompetence", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.Competence", "Competence")
                        .WithMany("Disciplines")
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RPDControlSystem.Models.RPD.DisciplineInfo", "DisciplineInfo")
                        .WithMany("Competencies")
                        .HasForeignKey("DisciplineInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.DisciplineInfo", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.Discipline", "Discipline")
                        .WithMany("DisciplinesInfo")
                        .HasForeignKey("DisciplineCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RPDControlSystem.Models.RPD.Plan", "Plan")
                        .WithMany("Disciplines")
                        .HasForeignKey("PlanCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RPDControlSystem.Models.RPD.TeacherProfile", "TeacherProfile")
                        .WithMany("Disciplines")
                        .HasForeignKey("TeacherProfileId");

                    b.HasOne("RPDControlSystem.Models.File", "WorkPlan")
                        .WithMany()
                        .HasForeignKey("WorkPlanId");
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Plan", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.Profile", "Profile")
                        .WithMany("Plans")
                        .HasForeignKey("ProfileCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.Profile", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.Direction", "Direction")
                        .WithMany("Profiles")
                        .HasForeignKey("DirectionCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.ProfileCompetence", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.Competence", "Competence")
                        .WithMany("Profiles")
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RPDControlSystem.Models.RPD.Profile", "Profile")
                        .WithMany("Competencies")
                        .HasForeignKey("ProfileCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RPDControlSystem.Models.RPD.TeacherProfile", b =>
                {
                    b.HasOne("RPDControlSystem.Models.RPD.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RPDControlSystem.Models.File", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.HasOne("RPDControlSystem.Models.RPD.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
